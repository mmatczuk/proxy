// Automatically generated by MockGen. DO NOT EDIT!
// Source: service.go

package proxy

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceRecorder
}

// Recorder for MockService (not exported)
type _MockServiceRecorder struct {
	mock *MockService
}

func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &_MockServiceRecorder{mock}
	return mock
}

func (_m *MockService) EXPECT() *_MockServiceRecorder {
	return _m.recorder
}

func (_m *MockService) CreateTask(ctx context.Context, config *TaskConfig) (TaskID, error) {
	ret := _m.ctrl.Call(_m, "CreateTask", ctx, config)
	ret0, _ := ret[0].(TaskID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) CreateTask(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTask", arg0, arg1)
}

func (_m *MockService) TaskStatus(ctx context.Context, id TaskID) (*TaskStatus, error) {
	ret := _m.ctrl.Call(_m, "TaskStatus", ctx, id)
	ret0, _ := ret[0].(*TaskStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) TaskStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskStatus", arg0, arg1)
}

func (_m *MockService) KillTask(ctx context.Context, id TaskID) (*TaskStatus, error) {
	ret := _m.ctrl.Call(_m, "KillTask", ctx, id)
	ret0, _ := ret[0].(*TaskStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) KillTask(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KillTask", arg0, arg1)
}
